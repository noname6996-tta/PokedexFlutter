import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:pokedex/data/app_urls.dart';
import 'package:pokedex/model/pokemon.dart';
import 'package:http/http.dart' as http;

class ItemDetailScreen extends StatefulWidget {
  final int a;
  ItemDetailScreen({required this.a});

  @override
  _ItemDetailScreenState createState() => _ItemDetailScreenState();
}

class ApiService {
  static Future<Autogenerated> fetchItemDetail(int itemId) async {
    try {
      final response = await http.get(Uri.parse('${AppUrl.baseUrl}/$itemId/'));

      if (response.statusCode == 200) {
        Map<String, dynamic> data = json.decode(response.body);
        return Autogenerated.fromJson(data);
      } else {
        throw Exception('Error occurred while fetching item detail ${response.request} ');
      }
    } catch (error) {
      print('Error occurred while fetching item detail: $error');
      // You can also log the error for further analysis
      // logger.error('Error occurred while fetching item detail: $error');
      rethrow; // Rethrow the error to maintain the original flow
    }
  }
}

class _ItemDetailScreenState extends State<ItemDetailScreen> {
  late Future<Autogenerated> itemDetail; // Đối tượng lưu trữ thông tin chi tiết

  @override
  void initState() {
    super.initState();
    // Gọi API khi màn hình được tạo
    itemDetail = fetchItemDetail(widget
        .a); // Thay thế "widget.item.id" bằng trường ID của item trong API của bạn
  }

  Future<Autogenerated> fetchItemDetail(int i) async {
    final response = await http.get(Uri.parse(AppUrl.baseUrl + (i+1).toString()));

    if (response.statusCode == 200) {
      // If the server did return a 200 OK response,
      // then parse the JSON.
      return Autogenerated.fromJson(
          jsonDecode(response.body) as Map<String, dynamic>);
    } else {
      // If the server did not return a 200 OK response,
      // then throw an exception.
      throw Exception('Failed to load album ${response.request}');
    }
  }

  @override
  Widget build(BuildContext context) {
    if (itemDetail == null) {
      return CircularProgressIndicator(); // Hiển thị indicator trong quá trình tải dữ liệu
    } else {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Detail'),
        ),
        body: Center(
          child: FutureBuilder<Autogenerated>(
              future: itemDetail,
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Scaffold(
                    body: Column(
                      children: [
                        Container(
                          height: 100,
                          width: 100,
                          child: Image.network(
                              snapshot.data?.sprites?.other?.officialArtwork?.frontDefault ?? ""),
                        ),
                        Center(
                          child: Text(snapshot.data?.forms?[0].name ?? ""),
                        ),
                        SizedBox(height: 16),
                        Padding(
                          padding: const EdgeInsets.only(left: 16.0),
                          child: Text('weight: ${snapshot.data?.weight?? ""}'),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(left: 16.0),
                          child: Text('weight: ${snapshot.data?.weight?? ""}'),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(left: 16.0),
                          child: Text('Left-aligned text 3'),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(left: 16.0),
                          child: Text('Left-aligned text 4'),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(left: 16.0),
                          child: Text('Left-aligned text 4'),
                        ),
                      ],
                    ),
                  );
                } else if (snapshot.hasError) {
                  return Text('${snapshot.error}');
                }
                return const CircularProgressIndicator();
              }),
        ),
      );
    }
  }
}
